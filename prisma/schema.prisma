//********** _header.part.prisma **********//

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// This file is created from parts located in ./schemas

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//********** group.part.prisma **********//

model Group {
  id String @id @default(cuid())
  title String
  lists List[]
}//********** list.part.prisma **********//

model ListRow {
  type String @default("text")
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz()
  content   String   @db.VarChar(255)
  list      List     @relation(fields: [listId], references: [id])
  listId    String
}

model List {
  id     String    @id @default(cuid())
  rows   ListRow[]
  title  String
  user   User      @relation(fields: [userId], references: [id])
  group  Group[]
  userId String
  posX   Int @default(0)
  posY   Int @default(0)
}
//********** movies.part.prisma **********//

model Movie {
  adult Boolean
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz()
  imdb_id String?
  tmdb_id Int @unique
  backdrop_path String?
  poster_path String?
  title String?
  original_title String
  release_date DateTime? @db.Date
  overview String?
  popularity Float
  //   genres Genre?
}

// model Genre {
//   id String @id @default(cuid())
//   tmdb_id String
//   name String
//   movies Movie[]
// }//********** user.part.prisma **********//

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  list List[]
}

model Profile {
  id     String     @id @default(cuid())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
